#include "Map.h"


#define FACTOR 0.92
#define TAM (70*FACTOR)//70

#define WIDTH 1024
#define HEIGHT 768


Map* Map::instance = 0;

Map* Map::Instance()
{
    if (instance == 0) {
        instance = new Map();
    }
    return instance;
}

Map::Map(){
    backGround = new sf::Texture;
    textureMap = new sf::Texture;
    textureMap->loadFromFile("img/tiles_map.png");
    numMap = 1;





}

void Map::loadMap(Level *level, int nMap){

    numMap = nMap;

    sf::Sprite *sprite = new sf::Sprite;
    sf::Sprite *spriteDecoration = new sf::Sprite;
    rellenarModificableMap();//OK
    level->addSpriteMap(loadBackGround());//OK

    int i = 0;
    for(int y = 0; y < 10; y++){
        for(int x = 0; x < 16; x++){
            sprite = takeMapSprite(allocation(i));//OK
            sprite->setPosition(TAM*x,TAM*y);//OK
            level->addSpriteMap(sprite);//OK

            spriteDecoration = takeMapSprite(allocationDecor(i));//OK
            spriteDecoration->setPosition(TAM*x,TAM*y);//OK
            level->addSpriteNotCollitionable(spriteDecoration);//OK
            i++;
        }
    }


}

void Map::rellenarModificableMap(){
    for(int i = 0; i< 160; i++){
       modificableMap[i]=allocationDecor(i);
    }

}


sf::Sprite* Map::takeMapSprite(int pos){
    sf::IntRect rect;
    sf::Sprite * sprite = new sf::Sprite;

    if(pos!=-1){//no devolver nada
        int x = pos;
        int y = 0;

        // de 0 a 11 si es mas de 11 estamos en otra fila
        if(pos >= 12){
            x = pos%12;
            y = pos/12;
        }

        x=70*x+x;//le sumo la x porque hay una separacion entre tiles de 1 pixel
        y=70*y+y;

        rect = sf::IntRect(x,y,70,70);
        sprite->setTexture(*textureMap);
        sprite->setTextureRect(rect);
        sprite->setScale(FACTOR,FACTOR);
    }

    return  sprite;
}

sf::Sprite* Map::loadBackGround(){
    if(numMap == 1){
        backGround->loadFromFile("img/background.jpg");
    }else if(numMap == 2){
        backGround->loadFromFile("img/background2.jpg");
    }else if(numMap == 3){
        backGround->loadFromFile("img/background3.jpg");
    }else if(numMap == 4){
        backGround->loadFromFile("img/background4.jpg");
    }else{
        cout << "Fondo sin construir" << endl;
    }

    sf::Sprite *sprite = new sf::Sprite;
    sprite->setTexture(*backGround);
    sprite->setOrigin(sprite->getGlobalBounds().width/2, sprite->getGlobalBounds().height/2);
    sprite->setPosition(WIDTH/2,HEIGHT/2);
    return sprite;
}



int Map::allocation(int num){
    int ret= -1;
    if ( numMap== 1 ){

            int mapa[] = {
            8 , 8, 8,53,53,53,53,53,53,53,53,53,53,53,53, 8,
            8 ,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,
            8 ,-1,-1,-1,-1,83,54,54,54,54,45,56,56,-1,-1,83,
           119,-1,-1,-1,-1, 8,11,11,11,11, 8,-1, 8,-1,-1, 8,
            83,-1,45,56,56, 8,-1,-1,-1,-1, 8,-1, 8,-1,-1, 8,
            8 ,-1, 8, 8,-1,-1,-1,45,56,56, 8,-1,-1,-1,-1, 8,
            64,-1,-1,-1,-1,-1,56, 8, 8, 8, 8,-1,-1,83,-1, 8,
            8 ,-1,-1,-1,-1,31, 8, 8, 8, 8, 8,-1,83, 8,-1, 8,
            8 ,56,56,67,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8,-1, 8,
            8 , 8, 8, 8,56,56,56,56,56,56,56,56, 8, 8,83, 8,
            };
            if(num >= 0 && num <=191){
                ret = mapa[num] ;
            }
    }else if ( numMap == 2 ){//Mapa 2

            int mapa[] = {
           114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
            30, -1, -1, -1, -1, -1,119, -1, -1, -1, -1, -1, -1, 48,111,111,
           114,114, -1,114,114,114,114, -1,114,114,114,114,114,114,111,111,
           140, -1, -1, -1,111,111,111, 91, -1, -1, -1, -1, -1,107,111,111,
           119, -1, -1, -1, 37,111,111, -1, -1,114,114, -1, -1, 15,111,111,
           114,114, -1,114,114,111,111, -1, -1,111, -1, -1, -1, 72,111,111,
           111, -1, -1, -1, -1, -1, -1, -1, 53,111, -1, -1, -1, -1,111,111,
           111, -1,114,114,114, -1,113, -1, -1, -1, -1, -1, -1, -1,111,111,
           111, -1,111,111,111, -1,111,114, -1,114, -1,114,114,114,111,111,
           111,114,111,111,111,114,111,111,114,111,114,111,111,111,111,111,
            };
            if(num >= 0 && num <=191){
                ret = mapa[num] ;
            }
    }else if ( numMap == 3 ){//Mapa 2

            int mapa[] = {
            126, 53, 81, 82, 53, 53, 53, 53, 53, 53, 53, 53, 81, 82, 53,126,
            126, -1,126,128, -1, -1, -1, -1, -1, -1, -1, -1,126,128, -1,126,
            126, -1, -1, -1,117, -1,117,117,117,117, -1,117, -1, -1, -1,126,
            126, -1,105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,105, -1,126,
            126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,126,
            126, -1, -1,117,117,117,117,117,117,117,117,117,117, -1, -1,126,
            126, -1, -1,126,126,126, -1, -1, -1, -1,126,126,126, -1, -1,126,
            126,117, -1, -1, -1,126,126, -1, -1,126,126, -1, -1, -1,117,126,
            126,126,117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,117,126,126,
            126,126,126,117,117,117,117,117,117,117,117,117,117,126,126,126,
            };
            if(num >= 0 && num <=191){
                ret = mapa[num] ;
            }
    }else if ( numMap == 4 ){//Mapa 2

            int mapa[] = {
           132,132,132, 53, 53, 53, 53, 53, 53, -1, -1, -1, -1, -1, -1, -1,
           132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
           132,121, -1,121,121,121,121,121,121,121,121, -1, -1, -1, -1, 87,
           132,132, -1,132,132, -1, -1,132,132,132,132,121, -1, -1, -1,119,
           132,132, -1,132,132,121,121,132,132,132,132,132,121, -1, -1,132,
           132, -1, -1, -1, -1, -1, -1, -1,119,132,132, -1, -1, -1, 86,132,
           132,121, 86, 86, -1,121,121,121,121,132, -1, -1, -1, 86, -1,132,
           132,132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1,132,
           132, 37, -1, -1, -1, 30, -1, -1, -1, -1, -1, 86, -1, -1, -1,132,
           132,132,121,121,121,121,121,121,121,121,121,121,121,121,121,132,
            };
            if(num >= 0 && num <=191){
                ret = mapa[num] ;
            }
    }else{
        cout << "Mapa sin construir" << endl;
    }


    return ret;
}


int Map::allocationDecor(int num){
    int ret= -1;
    if ( numMap== 1 ){
            int mapa[] = {
            -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
            -1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,
            -1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
            -1,-1,29,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
            -1,23,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,-1,-1,
            -1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,
            -1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,
            -1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,-1,-1,-1,-1,
            -1,-1,-1,-1,23,36,-1,-1,-1,-1,-1,23,-1,-1,60,-1,
            -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
            };
            if(num >= 0 && num <=191){
                ret = mapa[num] ;
            }
    }else if ( numMap == 2 ){//Mapa 2

             int mapa[] = {
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, 29, 23, -1, -1, -1, -1, -1, 23, -1, -1, 23, -1, -1, -1, -1,
            -1, -1, 23, -1, -1, -1, -1, -1, 23, -1, -1, 23, -1, -1, -1, -1,
            -1, -1, 23, -1, -1, -1,101, 23, -1, -1, -1, 23, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 23, -1, 29, -1, -1,
            -1, 68, -1, -1, -1, 60, -1, -1, 29, -1, 60, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            };
            if(num >= 0 && num <=191){
                ret = mapa[num] ;
            }

    }else if ( numMap == 3 ){//Mapa 2

             int mapa[] = {
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, 23, 29, -1, -1, 23, -1, -1, -1, -1, 23, -1, -1, 29, 23, -1,
             -1, 23, -1, 23, -1, 23, -1, -1, -1, -1, 23, -1, 23, -1, 23, -1,
             -1, 23, -1, 23, -1, 23, -1, -1, -1, -1, 23, -1, 23, -1, 23, -1,
             -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1,
             -1, 23, -1, -1, -1, -1,  2, -1, -1,  2, -1, -1, -1, -1, 23, -1,
             -1, -1, 29, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            };
            if(num >= 0 && num <=191){
                ret = mapa[num] ;
            }

    }else if ( numMap == 4 ){//Mapa 2

             int mapa[] = {
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, 29,
            -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, 29, -1, -1, -1, -1, 29, -1, -1, -1, 60, 60, 60, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            };
            if(num >= 0 && num <=191){
                ret = mapa[num] ;
            }

    }else{
        cout << "Mapa sin construir" << endl;
    }

    return ret;
}


int Map::getModificableMap(int num){
    int ret= -1;
    if(modificableMap[num]){
       ret = modificableMap[num];
    }
    return ret;
}

void Map::deleteModificableMap(int num){
    modificableMap[num] = -1;

}

/*
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

*/

